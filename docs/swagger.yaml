basePath: /api/v1
definitions:
  data.AccessTokenResponse:
    properties:
      access_token:
        type: string
    type: object
  data.AccountVerificationRequest:
    properties:
      code:
        example: f47ac10b58cc4372a5670e02b2c3d479
        type: string
    required:
    - code
    type: object
  data.ChangePasswordRequest:
    properties:
      new_password:
        example: re41h0k4ge
        minLength: 8
        type: string
      old_password:
        example: k4kash1sense1
        minLength: 8
        type: string
    required:
    - new_password
    - old_password
    type: object
  data.CreateCardRequest:
    properties:
      character_name:
        example: Hatake Kakashi
        maxLength: 64
        type: string
      image_url:
        example: https://example.com/image.jpg
        type: string
      manufacturer_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      rarity:
        example: SSR
        maxLength: 12
        type: string
      serial_number:
        example: SE-014
        maxLength: 64
        type: string
    required:
    - manufacturer_id
    - rarity
    type: object
  data.CreateManufacturerRequest:
    properties:
      description_eng:
        example: Chinese manufacturer that is popular for Naruto collection cards
        minLength: 6
        type: string
      description_ukr:
        example: Китайський виробник, популярний за колекційні картки по Наруто
        minLength: 6
        type: string
      image:
        example: https://example.com/image.png
        type: string
      original_title:
        example: Kayou
        minLength: 4
        type: string
    required:
    - original_title
    type: object
  data.CreateNonExistentCardRequest:
    properties:
      rarity:
        example: SSR
        maxLength: 12
        type: string
      serial_number:
        example: SE-014
        maxLength: 64
        type: string
    type: object
  data.GetCardResponse:
    properties:
      character_name:
        example: Hatake Kakashi
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      image_url:
        example: https://example.com/image.jpg
        type: string
      rarity:
        example: SSR
        type: string
      serial_number:
        example: SE-014
        type: string
    type: object
  data.GetCollectionInfoResponse:
    properties:
      cards_collected:
        example: 100
        type: integer
      cards_total:
        example: 100
        type: integer
      non_existent_cards:
        items:
          $ref: '#/definitions/data.GetNonExistentCardResponse'
        type: array
      rarities:
        example:
        - '["SSR"'
        - '"SR"'
        - '"R"]'
        items:
          type: string
        type: array
    type: object
  data.GetManufacturerResponse:
    properties:
      description_eng:
        example: Chinese manufacturer that is popular for Naruto collection cards
        type: string
      description_ukr:
        example: Китайський виробник, популярний за колекційні картки по Наруто
        type: string
      id:
        example: 3c1e3b82-3a29-4cc0-a4b2-4e7c4ac58052
        format: uuid
        type: string
      image:
        example: https://example.com/image.png
        type: string
      original_title:
        example: Kayou
        type: string
    type: object
  data.GetNonExistentCardResponse:
    properties:
      id:
        example: 00000000-0000-0000-0000-000000000000
        type: string
      rarity:
        example: SSR
        type: string
      serial_number:
        example: SE-014
        type: string
    type: object
  data.GetOwnedCardResponse:
    properties:
      character_name:
        example: Hatake Kakashi
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      image_url:
        example: https://example.com/image.jpg
        type: string
      rarity:
        example: SSR
        type: string
      serial_number:
        example: SE-014
        type: string
      status:
        example: collected
        type: string
    type: object
  data.GetUserResponse:
    properties:
      email:
        example: realhokage@gmail.com
        type: string
      id:
        example: 3c1e3b82-3a29-4cc0-a4b2-4e7c4ac58052
        format: uuid
        type: string
      role:
        allOf:
        - $ref: '#/definitions/types.UserRole'
        example: regular
      username:
        example: realhokage
        type: string
      verified:
        example: true
        type: boolean
    type: object
  data.HealthCheckResponse:
    properties:
      status:
        allOf:
        - $ref: '#/definitions/types.HealthCheckStatus'
        example: ok
      version:
        example: 1.0.0
        type: string
    type: object
  data.PasswordResetRequest:
    properties:
      code:
        example: f47ac10b58cc4372a5670e02b2c3d479
        type: string
      email:
        example: re4lhok4ge@gmail.com
        type: string
      new_password:
        example: strongpass
        minLength: 8
        type: string
    required:
    - code
    - email
    - new_password
    type: object
  data.SendPasswordResetEmailRequest:
    properties:
      email:
        example: re4lhok5ge@gmail.com
        type: string
    required:
    - email
    type: object
  data.SignInRequest:
    properties:
      email:
        example: realnaruto@gmail.com
        type: string
      password:
        example: k4kash1sense1
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  data.SignUpRequest:
    properties:
      email:
        example: realnaruto@gmail.com
        type: string
      password:
        example: k4kash1sense1
        type: string
      username:
        example: real_naruto
        minLength: 6
        type: string
    required:
    - email
    - password
    - username
    type: object
  data.UpdateCardRequest:
    properties:
      character_name:
        example: Hatake Kakashi
        maxLength: 64
        minLength: 2
        type: string
      image_url:
        example: https://example.com/image.jpg
        type: string
      rarity:
        example: SSR
        maxLength: 12
        type: string
      serial_number:
        example: SE-014
        maxLength: 64
        type: string
    type: object
  data.UpdateCollectionChange:
    properties:
      status:
        $ref: '#/definitions/types.CollectionCardStatus'
    type: object
  data.UpdateCollectionRequest:
    properties:
      change:
        $ref: '#/definitions/data.UpdateCollectionChange'
      ids:
        items:
          type: string
        type: array
    type: object
  data.UpdateCollectionResponse:
    properties:
      cards_collected:
        type: integer
    type: object
  data.UpdateManufacturerRequest:
    properties:
      description_eng:
        example: Chinese manufacturer that is popular for Naruto collection cards
        minLength: 6
        type: string
      description_ukr:
        example: Китайський виробник, популярний за колекційні картки по Наруто
        minLength: 6
        type: string
      image:
        example: https://example.com/image.png
        type: string
      original_title:
        example: Kayou
        minLength: 4
        type: string
    type: object
  data.UpdateUserRequest:
    properties:
      email:
        example: realhokage@gmail.com
        type: string
      username:
        example: realhokage
        minLength: 6
        type: string
    type: object
  types.CollectionCardStatus:
    enum:
    - collected
    - not-collected
    type: string
    x-enum-varnames:
    - CardCollected
    - CardNotCollected
  types.DetailedError:
    properties:
      detail:
        description: detail of field's error, if error is unknown, this field will
          be "" (empty string)
        type: string
      field:
        description: problematic field on which error occured, if error has no specific
          errored field (in case of general error) this field will be "" (empty string)
        type: string
    type: object
  types.ErrorResponse:
    properties:
      error:
        description: error type
        type: string
      errors:
        items:
          $ref: '#/definitions/types.DetailedError'
        type: array
      message:
        description: messsage describing an error
        type: string
    type: object
  types.HealthCheckStatus:
    enum:
    - ok
    type: string
    x-enum-varnames:
    - HEALTH_CHECK_STATUS_OK
  types.SuccessResponse:
    properties:
      data: {}
      message:
        example: success
        type: string
    type: object
  types.UserRole:
    enum:
    - regular
    - admin
    type: string
    x-enum-varnames:
    - REGULAR
    - ADMIN
host: localhost:4000
info:
  contact:
    email: ka1tzyu@gmail.com
    name: Back-end engineer
  description: This API documentation describes endpoints and models you will face
    with during interaction with KadoCore APIs
  title: KadoCore API
  version: "1.0"
paths:
  /auth/google/callback:
    get:
      description: This endpoint will be automatically trigerred by Google with related
        credentials. If user with this credetials doesn't exist in database, server
        will automatically create a new user (with randomized username) and return
        auth token pair. Otherwise it will login user with auth token pair.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/data.AccessTokenResponse'
              type: object
        "400":
          description: Incorrect OAuth state; OAuth exchange error; OAuth user fetching
            error; UserData reading error; Unexpected database error;
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Google callback
      tags:
      - auth
  /auth/google/login:
    get:
      description: Used to login/register with Google account, user will be redirected
        to Google's OAuth page.
      responses:
        "303":
          description: Redirected
      summary: Google login
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Used to login users registered with email. Refresh token is saved
        in secured cookies and can be used to refresh token pair (refresh and access
        token).
      parameters:
      - description: sign in body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/data.AccessTokenResponse'
              type: object
        "400":
          description: Unexpected database error; Incorrect password;
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Login
      tags:
      - auth
  /auth/logout:
    post:
      description: Helps user to log out. This endpoint will trigger auth cookies
        expiration.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
      summary: Logout
      tags:
      - auth
  /auth/refresh-token:
    post:
      description: Helps to refresh access token. Returns new access token and store
        refresh token in cookies. Refresh tokens are saved in database and their usage
        is tracked. So if refresh token is used second time, all user's refresh tokens
        will be wiped. This deletion will force all user's authenticated devices to
        log in again when access token expires.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/data.AccessTokenResponse'
              type: object
        "400":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "403":
          description: Token processing error; Malicious activity detected;
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: User not found; Token not found;
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Serves as a registration endpoint for new users creation. After
        registration email verification is sent.
      parameters:
      - description: sign up body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/data.AccessTokenResponse'
              type: object
        "400":
          description: Password hashing error; Unexpected database error;
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "409":
          description: Username of email in from request is already taken
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Sign up
      tags:
      - auth
  /cards:
    post:
      consumes:
      - application/json
      description: Helps to create a new card
      parameters:
      - description: create card body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.CreateCardRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/data.GetCardResponse'
              type: object
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "403":
          description: Action is forbidden for user of this role
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a card
      tags:
      - cards
  /cards/by-id/{id}:
    delete:
      description: Helps to delete an existing card by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "403":
          description: Action is forbidden for user of this role
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Card not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete by id
      tags:
      - cards
    get:
      description: Helps to retrieve an existing card by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/data.GetCardResponse'
              type: object
        "400":
          description: Incorrect id format
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Card not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get by id
      tags:
      - cards
    patch:
      consumes:
      - application/json
      description: Helps to update an existing card
      parameters:
      - description: update card body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.UpdateCardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "403":
          description: Action is forbidden for user of this role
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Card not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a card
      tags:
      - cards
  /cards/by-manufacturer/{id}:
    get:
      description: Helps to retrieve a list of all cards
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/data.GetCardResponse'
                  type: array
              type: object
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get all cards
      tags:
      - cards
  /collection/get-by-rarity:
    get:
      description: Helps to retrieve all cards by rarity
      parameters:
      - description: rarity of the card
        in: query
        name: rarity
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/data.GetOwnedCardResponse'
                  type: array
              type: object
        "400":
          description: Rarity is required
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all cards by rarity
      tags:
      - cards
  /collection/info:
    get:
      description: Helps to retrieve collection info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/data.GetCollectionInfoResponse'
              type: object
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get collection info
      tags:
      - cards
  /collection/search:
    get:
      description: Helps to search cards by term (by character name or serial number)
      parameters:
      - description: search term
        in: query
        name: term
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/data.GetOwnedCardResponse'
                  type: array
              type: object
        "400":
          description: Term is required
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Search cards by term
      tags:
      - cards
  /collection/update:
    post:
      consumes:
      - application/json
      description: Helps to update collection info (change collected status)
      parameters:
      - description: collection update body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.UpdateCollectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/data.UpdateCollectionResponse'
              type: object
        "400":
          description: Rarity is required
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update collection info
      tags:
      - cards
  /healthcheck:
    get:
      description: Serves as route to check if server is up and running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/data.HealthCheckResponse'
              type: object
        "500":
          description: Server is not available
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Healthcheck
      tags:
      - base
  /manufacturers:
    get:
      description: Helps to retrieve a list of all manufacturers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/data.GetManufacturerResponse'
                  type: array
              type: object
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get all manufacturers
      tags:
      - manufacturers
    post:
      consumes:
      - application/json
      description: Helps to create a new manufacturer
      parameters:
      - description: create manufacturer body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.CreateManufacturerRequest'
      produces:
      - application/json
      responses:
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "403":
          description: Action is forbidden for user of this role
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a manufacturer
      tags:
      - manufacturers
  /manufacturers/{id}:
    delete:
      description: Helps to delete the existing manufacturer
      produces:
      - application/json
      responses:
        "400":
          description: Incorrect id path
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "403":
          description: Action is forbidden for user of this role
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a manufacturer
      tags:
      - manufacturers
    get:
      description: Helps to get the manufacturer with the specified id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/data.GetManufacturerResponse'
              type: object
        "400":
          description: Incorrect id path
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Manufacturer not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get single manufacturer by id
      tags:
      - manufacturers
    patch:
      consumes:
      - application/json
      description: Helps to update the existing manufacturer
      parameters:
      - description: update manufacturer body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.UpdateManufacturerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Incorrect id path
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "403":
          description: Action is forbidden for user of this role
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a manufacturer
      tags:
      - manufacturers
  /manufacturers/{id}/add-non-existent-card:
    post:
      description: Helps to add non-existent cards to manufacturer
      parameters:
      - description: add non-existent card body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.CreateNonExistentCardRequest'
      produces:
      - application/json
      responses:
        "400":
          description: Incorrect id path
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "403":
          description: Action is forbidden for user of this role
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add non-existent cards
      tags:
      - manufacturers
  /manufacturers/{id}/non-existent-cards:
    get:
      description: Helps to get non-existent cards of manufacturer
      produces:
      - application/json
      responses:
        "400":
          description: Incorrect id path
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get non-existent cards
      tags:
      - manufacturers
  /manufacturers/non-existent-card/{id}:
    delete:
      description: Helps to delete the existing non-exitent card
      produces:
      - application/json
      responses:
        "400":
          description: Incorrect id path
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "403":
          description: Action is forbidden for user of this role
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete non-existent card
      tags:
      - manufacturers
  /users:
    delete:
      description: Helps completely delete a user and all related data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Helps to update user's data
      parameters:
      - description: update user body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/change-password:
    patch:
      consumes:
      - application/json
      description: Helps to change password of authenticated user.
      parameters:
      - description: change password body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Incorrect old password; Password hashing error; Unexpected
            database error;
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - users
  /users/me:
    get:
      description: Helps to retrieve data of authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/data.GetUserResponse'
              type: object
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get info about user
      tags:
      - users
  /users/request-password-reset:
    post:
      consumes:
      - application/json
      description: Helps to send password reset verification code to user's email.
        It can be used to reset password on other endpoint.
      parameters:
      - description: send password reset email body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.SendPasswordResetEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: password email reset was successfully sent
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Unexpected database error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Send password reset email
      tags:
      - users
  /users/resend-verification-email:
    post:
      description: Used to resend email verification in case of sending error or wrong
        email.
      produces:
      - application/json
      responses:
        "200":
          description: new message successfully sent
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: User is already verified; Unexpected database error;
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Resend email verification
      tags:
      - users
  /users/verify-email:
    post:
      consumes:
      - application/json
      description: Helps to verify account using the code sent to user's email.
      parameters:
      - description: account verification body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.AccountVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: User is already verified; Incorrect verification code; Unexpected
            database error;
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: User is not logged in
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Verify email
      tags:
      - users
  /users/verify-password-reset:
    post:
      consumes:
      - application/json
      description: Used to update user password with code received from email.
      parameters:
      - description: password reset body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Unexpected database error; Password hashing error;
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Password reset verification
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
