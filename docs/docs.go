// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Back-end engineer",
            "email": "ka1tzyu@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/google/callback": {
            "get": {
                "description": "This endpoint will be automatically trigerred by Google with related credentials. If user with this credetials doesn't exist in database, server will automatically create a new user (with randomized username) and return auth token pair. Otherwise it will login user with auth token pair.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Google callback",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/data.AccessTokenResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Incorrect OAuth state; OAuth exchange error; OAuth user fetching error; UserData reading error; Unexpected database error;",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/google/login": {
            "get": {
                "description": "Used to login/register with Google account, user will be redirected to Google's OAuth page.",
                "tags": [
                    "auth"
                ],
                "summary": "Google login",
                "responses": {
                    "303": {
                        "description": "Redirected"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Used to login users registered with email. Refresh token is saved in secured cookies and can be used to refresh token pair (refresh and access token).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "sign in body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.SignInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/data.AccessTokenResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Unexpected database error; Incorrect password;",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Helps user to log out. This endpoint will trigger auth cookies expiration.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "post": {
                "description": "Helps to refresh access token. Returns new access token and store refresh token in cookies. Refresh tokens are saved in database and their usage is tracked. So if refresh token is used second time, all user's refresh tokens will be wiped. This deletion will force all user's authenticated devices to log in again when access token expires.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/data.AccessTokenResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Token processing error; Malicious activity detected;",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found; Token not found;",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Serves as a registration endpoint for new users creation. After registration email verification is sent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign up",
                "parameters": [
                    {
                        "description": "sign up body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/data.AccessTokenResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Password hashing error; Unexpected database error;",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Username of email in from request is already taken",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cards": {
            "get": {
                "description": "Helps to retrieve a list of all cards",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Get all cards",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/data.GetCardResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to create a new card",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Create a card",
                "parameters": [
                    {
                        "description": "create card body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.CreateCardRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/data.GetCardResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Action is forbidden for user of this role",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cards/by-id/{id}": {
            "get": {
                "description": "Helps to retrieve an existing card by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Get by id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/data.GetCardResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Incorrect id format",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Card not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to delete an existing card by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Delete by id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Action is forbidden for user of this role",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Card not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to update an existing card",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Update a card",
                "parameters": [
                    {
                        "description": "update card body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.UpdateCardRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Action is forbidden for user of this role",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Card not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collection/get-by-rarity": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to retrieve all cards by rarity",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Get all cards by rarity",
                "parameters": [
                    {
                        "type": "string",
                        "description": "rarity of the card",
                        "name": "rarity",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/data.GetOwnedCardResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Rarity is required",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collection/info": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to retrieve collection info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Get collection info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/data.GetCollectionInfoResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collection/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to search cards by term (by character name or serial number)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Search cards by term",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search term",
                        "name": "term",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/data.GetOwnedCardResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Term is required",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/collection/update": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to update collection info (change collected status)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Update collection info",
                "parameters": [
                    {
                        "description": "collection update body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.UpdateCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/data.UpdateCollectionResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Rarity is required",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "description": "Serves as route to check if server is up and running",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "base"
                ],
                "summary": "Healthcheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/data.HealthCheckResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Server is not available",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/manufacturers": {
            "get": {
                "description": "Helps to retrieve a list of all manufacturers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "Get all manufacturers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/data.GetManufacturerResponse"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to create a new manufacturer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "Create a manufacturer",
                "parameters": [
                    {
                        "description": "create manufacturer body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.CreateManufacturerRequest"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Action is forbidden for user of this role",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/manufacturers/non-existent-card/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to delete the existing non-exitent card",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "Delete non-existent card",
                "responses": {
                    "400": {
                        "description": "Incorrect id path",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Action is forbidden for user of this role",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/manufacturers/{id}": {
            "get": {
                "description": "Helps to get the manufacturer with the specified id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "Get single manufacturer by id",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/data.GetManufacturerResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Incorrect id path",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Manufacturer not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to delete the existing manufacturer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "Delete a manufacturer",
                "responses": {
                    "400": {
                        "description": "Incorrect id path",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Action is forbidden for user of this role",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to update the existing manufacturer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "Update a manufacturer",
                "parameters": [
                    {
                        "description": "update manufacturer body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.UpdateManufacturerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Incorrect id path",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Action is forbidden for user of this role",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/manufacturers/{id}/add-non-existent-card": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to add non-existent cards to manufacturer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "Add non-existent cards",
                "parameters": [
                    {
                        "description": "add non-existent card body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.CreateNonExistentCardRequest"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Incorrect id path",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Action is forbidden for user of this role",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/manufacturers/{id}/non-existent-cards": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to get non-existent cards of manufacturer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "manufacturers"
                ],
                "summary": "Get non-existent cards",
                "responses": {
                    "400": {
                        "description": "Incorrect id path",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps completely delete a user and all related data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to update user's data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "description": "update user body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/change-password": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to change password of authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "change password body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Incorrect old password; Password hashing error; Unexpected database error;",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to retrieve data of authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get info about user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/types.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/data.GetUserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/request-password-reset": {
            "post": {
                "description": "Helps to send password reset verification code to user's email. It can be used to reset password on other endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Send password reset email",
                "parameters": [
                    {
                        "description": "send password reset email body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.SendPasswordResetEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "password email reset was successfully sent",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Unexpected database error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/resend-verification-email": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Used to resend email verification in case of sending error or wrong email.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Resend email verification",
                "responses": {
                    "200": {
                        "description": "new message successfully sent",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "User is already verified; Unexpected database error;",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/verify-email": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Helps to verify account using the code sent to user's email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "description": "account verification body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.AccountVerificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "User is already verified; Incorrect verification code; Unexpected database error;",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/verify-password-reset": {
            "post": {
                "description": "Used to update user password with code received from email.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Password reset verification",
                "parameters": [
                    {
                        "description": "password reset body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.PasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Unexpected database error; Password hashing error;",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "data.AccessTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "data.AccountVerificationRequest": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "f47ac10b58cc4372a5670e02b2c3d479"
                }
            }
        },
        "data.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "re41h0k4ge"
                },
                "old_password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "k4kash1sense1"
                }
            }
        },
        "data.CreateCardRequest": {
            "type": "object",
            "required": [
                "rarity"
            ],
            "properties": {
                "character_name": {
                    "type": "string",
                    "maxLength": 64,
                    "example": "Hatake Kakashi"
                },
                "exists": {
                    "type": "boolean",
                    "example": true
                },
                "image_url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "rarity": {
                    "type": "string",
                    "maxLength": 12,
                    "example": "SSR"
                },
                "serial_number": {
                    "type": "string",
                    "maxLength": 64,
                    "example": "SE-014"
                }
            }
        },
        "data.CreateManufacturerRequest": {
            "type": "object",
            "required": [
                "original_title"
            ],
            "properties": {
                "description_eng": {
                    "type": "string",
                    "minLength": 6,
                    "example": "Chinese manufacturer that is popular for Naruto collection cards"
                },
                "description_ukr": {
                    "type": "string",
                    "minLength": 6,
                    "example": "Китайський виробник, популярний за колекційні картки по Наруто"
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/image.png"
                },
                "original_title": {
                    "type": "string",
                    "minLength": 4,
                    "example": "Kayou"
                }
            }
        },
        "data.CreateNonExistentCardRequest": {
            "type": "object",
            "properties": {
                "rarity": {
                    "type": "string",
                    "maxLength": 12,
                    "example": "SSR"
                },
                "serial_number": {
                    "type": "string",
                    "maxLength": 64,
                    "example": "SE-014"
                }
            }
        },
        "data.GetCardResponse": {
            "type": "object",
            "properties": {
                "character_name": {
                    "type": "string",
                    "example": "Hatake Kakashi"
                },
                "exists": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "image_url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "rarity": {
                    "type": "string",
                    "example": "SSR"
                },
                "serial_number": {
                    "type": "string",
                    "example": "SE-014"
                }
            }
        },
        "data.GetCollectionInfoResponse": {
            "type": "object",
            "properties": {
                "cards_collected": {
                    "type": "integer",
                    "example": 100
                },
                "cards_total": {
                    "type": "integer",
                    "example": 100
                },
                "non_existent_cards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/data.GetNonExistentCardResponse"
                    }
                },
                "rarities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"SSR\"",
                        "\"SR\"",
                        "\"R\"]"
                    ]
                }
            }
        },
        "data.GetManufacturerResponse": {
            "type": "object",
            "properties": {
                "description_eng": {
                    "type": "string",
                    "example": "Chinese manufacturer that is popular for Naruto collection cards"
                },
                "description_ukr": {
                    "type": "string",
                    "example": "Китайський виробник, популярний за колекційні картки по Наруто"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "3c1e3b82-3a29-4cc0-a4b2-4e7c4ac58052"
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/image.png"
                },
                "original_title": {
                    "type": "string",
                    "example": "Kayou"
                }
            }
        },
        "data.GetNonExistentCardResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "00000000-0000-0000-0000-000000000000"
                },
                "rarity": {
                    "type": "string",
                    "example": "SSR"
                },
                "serial_number": {
                    "type": "string",
                    "example": "SE-014"
                }
            }
        },
        "data.GetOwnedCardResponse": {
            "type": "object",
            "properties": {
                "character_name": {
                    "type": "string",
                    "example": "Hatake Kakashi"
                },
                "exists": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "image_url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "rarity": {
                    "type": "string",
                    "example": "SSR"
                },
                "serial_number": {
                    "type": "string",
                    "example": "SE-014"
                },
                "status": {
                    "type": "string",
                    "example": "collected"
                }
            }
        },
        "data.GetUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "realhokage@gmail.com"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "3c1e3b82-3a29-4cc0-a4b2-4e7c4ac58052"
                },
                "role": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.UserRole"
                        }
                    ],
                    "example": "regular"
                },
                "username": {
                    "type": "string",
                    "example": "realhokage"
                },
                "verified": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "data.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.HealthCheckStatus"
                        }
                    ],
                    "example": "ok"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "data.PasswordResetRequest": {
            "type": "object",
            "required": [
                "code",
                "email",
                "new_password"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "f47ac10b58cc4372a5670e02b2c3d479"
                },
                "email": {
                    "type": "string",
                    "example": "re4lhok4ge@gmail.com"
                },
                "new_password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "strongpass"
                }
            }
        },
        "data.SendPasswordResetEmailRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "re4lhok5ge@gmail.com"
                }
            }
        },
        "data.SignInRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "realnaruto@gmail.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "k4kash1sense1"
                }
            }
        },
        "data.SignUpRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "realnaruto@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "k4kash1sense1"
                },
                "username": {
                    "type": "string",
                    "minLength": 6,
                    "example": "real_naruto"
                }
            }
        },
        "data.UpdateCardRequest": {
            "type": "object",
            "properties": {
                "character_name": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 2,
                    "example": "Hatake Kakashi"
                },
                "exists": {
                    "type": "boolean",
                    "example": true
                },
                "image_url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "rarity": {
                    "type": "string",
                    "maxLength": 12,
                    "example": "SSR"
                },
                "serial_number": {
                    "type": "string",
                    "maxLength": 64,
                    "example": "SE-014"
                }
            }
        },
        "data.UpdateCollectionChange": {
            "type": "object",
            "properties": {
                "status": {
                    "$ref": "#/definitions/types.CollectionCardStatus"
                }
            }
        },
        "data.UpdateCollectionRequest": {
            "type": "object",
            "properties": {
                "change": {
                    "$ref": "#/definitions/data.UpdateCollectionChange"
                },
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "data.UpdateCollectionResponse": {
            "type": "object",
            "properties": {
                "cards_collected": {
                    "type": "integer"
                }
            }
        },
        "data.UpdateManufacturerRequest": {
            "type": "object",
            "properties": {
                "description_eng": {
                    "type": "string",
                    "minLength": 6,
                    "example": "Chinese manufacturer that is popular for Naruto collection cards"
                },
                "description_ukr": {
                    "type": "string",
                    "minLength": 6,
                    "example": "Китайський виробник, популярний за колекційні картки по Наруто"
                },
                "image": {
                    "type": "string",
                    "example": "https://example.com/image.png"
                },
                "original_title": {
                    "type": "string",
                    "minLength": 4,
                    "example": "Kayou"
                }
            }
        },
        "data.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "realhokage@gmail.com"
                },
                "username": {
                    "type": "string",
                    "minLength": 6,
                    "example": "realhokage"
                }
            }
        },
        "types.CollectionCardStatus": {
            "type": "string",
            "enum": [
                "collected",
                "not-collected"
            ],
            "x-enum-varnames": [
                "CardCollected",
                "CardNotCollected"
            ]
        },
        "types.DetailedError": {
            "type": "object",
            "properties": {
                "detail": {
                    "description": "detail of field's error, if error is unknown, this field will be \"\" (empty string)",
                    "type": "string"
                },
                "field": {
                    "description": "problematic field on which error occured, if error has no specific errored field (in case of general error) this field will be \"\" (empty string)",
                    "type": "string"
                }
            }
        },
        "types.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "error type",
                    "type": "string"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.DetailedError"
                    }
                },
                "message": {
                    "description": "messsage describing an error",
                    "type": "string"
                }
            }
        },
        "types.HealthCheckStatus": {
            "type": "string",
            "enum": [
                "ok"
            ],
            "x-enum-varnames": [
                "HEALTH_CHECK_STATUS_OK"
            ]
        },
        "types.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "types.UserRole": {
            "type": "string",
            "enum": [
                "regular",
                "admin"
            ],
            "x-enum-varnames": [
                "REGULAR",
                "ADMIN"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:4000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "KadoCore API",
	Description:      "This API documentation describes endpoints and models you will face with during interaction with KadoCore APIs",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
